!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){const n=r(1),o=r(2);$(()=>{const t=$(".hanoi"),e=new n;new o(e,t)}),console.log("working!")},function(t,e){t.exports=class{constructor(){this.towers=[[3,2,1],[],[]]}isValidMove(t,e){const r=this.towers[t],n=this.towers[e];return 0!==r.length&&(0==n.length||r[r.length-1]<n[n.length-1])}isWon(){return 3==this.towers[2].length||3==this.towers[1].length}move(t,e){return!!this.isValidMove(t,e)&&(this.towers[e].push(this.towers[t].pop()),!0)}print(){console.log(JSON.stringify(this.towers))}promptMove(t,e){this.print(),t.question("Enter a starting tower: ",r=>{const n=parseInt(r);t.question("Enter an ending tower: ",t=>{const r=parseInt(t);e(n,r)})})}run(t,e){this.promptMove(t,(r,n)=>{this.move(r,n)||console.log("Invalid move!"),this.isWon()?(this.print(),console.log("You win!"),e()):this.run(t,e)})}}},function(t,e){t.exports=class{constructor(t,e){this.game=t,this.el=e,this.setupTowers(),this.bindEvents(),this.currentTower=null}bindEvents(){$("ul").on("click",t=>{this.game.isWon()||(null===this.currentTower&&$(t.currentTarget).context.children.length>0?(this.currentTower=$(t.currentTarget),this.currentTower.css("background-color","green")):this.currentTower&&this.game.isValidMove(this.currentTower.data("num"),$(t.currentTarget).data("num"))?(this.makeMove(this.currentTower,$(t.currentTarget)),this.currentTower.css("background-color","white"),this.currentTower=null,this.game.isWon()&&$(".towers").append("<h1>You Win!</h1>")):(this.currentTower.css("background-color","white"),this.currentTower=null))})}makeMove(t,e){const r=t.context.children[0];console.log($(r)),$(r).remove(),e.prepend($(r)),this.game.move(t.data("num"),e.data("num"))}setupTowers(){$(".towers").append('<div class="row" ></div>');for(let t=0;t<3;t++){const e=$('<ul class="tower" ></ul>');if(e.data("num",t),0===t)for(let t=0;t<3;t++){const r=$("<li></li>");r.data("size",t),r.css("width",50*(t+1)),e.append(r)}$(".row").append(e)}}}}]);